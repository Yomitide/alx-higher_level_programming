# The ''0-add_integer'' module

First import method to test 0-add_integer.
	>>> add_integer = __import__('0-add_integer').add_integer

USAGE:
Test use of adding two numbers (1, 2):
	>>> print(add_integer(1, 2))
	3

Test use of adding a positive with a negative number:
	>>> print(add_integer(100, -2))
	98
Test use of adding a number to default b=98 value:
	>>> print(add_integer(1))
	99
Test use of adding a float to an int:
	>>> print(add_integer(100.3, -2))
	98
Test use of adding a negative number with a positive number:
	>>> print(add_integer(-8, 16))
	8
Test use of adding a bool with an integer:
	>>> print(add_integer(True, 2))
	3
Test use of adding two boolen:
	>>> print(add_integer(True, True))
	2
Test us of adding two floats number
	>>> print(add_integer(10.4, 3.4))
	13
FAIL CASE:
Test use of passing no arguments:
	>>> print(add_integer())
	Traceback (most recent call last):
	     ...
	TypeError: add_integer() missing atleast 1 positional argument
Test use of passing more than two arguments:
        >>> print(add_integer(1, 3, 5))
        Traceback (most recent call last):
             ...
        TypeError: add_integer() takes from 1 to 2 positional argument
Test use of passing non integer or float data type:
        >>> print(add_integer("stressed"))
        Traceback (most recent call last):
             ...
        TypeError: a must be an integer
Test use of adding a tuple and integer:
	>>> print(add_integer((), 3))
	Traceback (most recent call last):
	     ...
	TypeError: a must be an integer
Test use of passing a symbol arguments:
        >>> print(add_integer(:, !))
        Traceback (most recent call last):
             ...
        SyntaxError: invalid syntax
Test use of special float NaN in python (not a number):
        >>> print(add_integer(float("NaN"), 6))
        Traceback (most recent call last):
             ...
        ValueError: cannot convert float NaN to integer
