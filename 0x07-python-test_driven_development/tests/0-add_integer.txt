# The ``0-add_integer`` module
============================================
USAGE:

Importing the function add_integer.
    >>> add_integer = __import__('0-add_integer').add_integer

``add_integer()`` returns the sum of its arguments. The default argument
for b is 98. For numbers, that value is equivalent to using the ``+``
operator:
	>>> add_integer(1, 2)
	3

Test for adding an integer and a float.
	>>> print(add_integer(100.3, -2))
	98

Test for passing one argument.
    >>> print(add_integer(2))
    100

Test for adding a positive and negative integer.
    >>> print(add_integer(100, -2))
    98

Test for adding an integer and a bool.
    >>> print(add_integer(4, True))
    5

Tesst for adding two bools.
    >>> print(add_integer(False, True))
    1

Test for passing one bool argument.
    >>> print(add_integer(True, ))
    9

Test for adding two float values.
    >>> print(add_integer(3.0, 8.0))
    11

Test for passing None as the only argument.
    >>> print(add_integer(None))
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test for adding an integer and None.
    >>> print(add_integer(2, None))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test for adding a string and an integer.
	>>> print(add_integer('a', 3))
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Test for adding a tuple and integer.
	>>> print(add_integer((), 3))
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Test for adding a NaN and an integer.
    >>> print(add_integer(float("NaN"), 4))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

Test for passing more than 2 arguments to the function.
	>>> print(add_integer(2, 8, 5))
	Traceback (most recent call last):
		...
	TypeError: add_integer() takes from 1 to 2 positional arguments but ...

Test for passing only the second argument.
    >>> print(add_integer(, 3))
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

Test for passing only a symbol.
    >>> print(add_integer(!))
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

Test for passing an undefined variable.
    >>> print(add_integer(b))
    Traceback (most recent call last):
        ...
    NameError: name ... is not defined


Test for passing 0 arguments.
    >>> print(add_integer())
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'
